{"repository_name":"every_so_often","body":"# Every So Often\nPerform an action every so often\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     every_so_often:\n       github: dscottboggs/every_so_often\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"every_so_often\"\n\ninclude EverySoOften\n\nevery 1.second do\n  puts Time.local\nend\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/every_so_often/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [D. Scott Boggs](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"every_so_often/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"every_so_often","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"every_so_often/EverySoOften","path":"EverySoOften.html","kind":"module","full_name":"EverySoOften","name":"EverySoOften","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/every_so_often.cr","line_number":1,"url":null}],"repository_name":"every_so_often","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"every_so_often/EverySoOften","kind":"module","full_name":"EverySoOften","name":"EverySoOften"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"every(duration:Time::Span,errors:Channel(Exception)?=nil,&action:->Nil):NoReturn-instance-method","name":"every","doc":"Attempts to execute the given `action` every `duration`. If an `errors`\nchannel is specified, any exceptions raised by the specified action will be\nsent to that channel; if not, the error is discarded. If `action` takes\nlonger than `duration` and `errors` is passed, a `TookTooLong` error is\npassed to the channel; otherwise, the action is run again as soon as\npossible.","summary":"<p>Attempts to execute the given <code>action</code> every <code>duration</code>.</p>","abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Time::Span"},{"name":"errors","doc":null,"default_value":"nil","external_name":"errors","restriction":"Channel(Exception) | ::Nil"}],"args_string":"(duration : Time::Span, errors : Channel(Exception)? = nil, &action :  -> Nil) : NoReturn","args_html":"(duration : Time::Span, errors : Channel(Exception)? = <span class=\"n\">nil</span>, &action :  -> Nil) : NoReturn","location":{"filename":"src/every_so_often.cr","line_number":22,"url":null},"def":{"name":"every","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":"Time::Span"},{"name":"errors","doc":null,"default_value":"nil","external_name":"errors","restriction":"Channel(Exception) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"(-> Nil)"},"return_type":"NoReturn","visibility":"Public","body":"loop do\n  done_chan = Channel(Done).new\n  start = Time.monotonic\n  spawn do\n    begin\n      action.call\n    rescue exception\n      errors.try(&.send(exception))\n    ensure\n      if done_chan.closed?\n      else\n        done_chan.send(done)\n      end\n    end\n  end\n  done_chan.receive\n  actual_duration = Time.monotonic - start\n  if actual_duration > duration\n    errors.try(&.send(TookTooLong.new(duration)))\n  else\n    sleep(duration - actual_duration)\n  end\nend"}}],"macros":[],"types":[{"html_id":"every_so_often/EverySoOften/TookTooLong","path":"EverySoOften/TookTooLong.html","kind":"class","full_name":"EverySoOften::TookTooLong","name":"TookTooLong","abstract":false,"superclass":{"html_id":"every_so_often/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"every_so_often/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"every_so_often/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"every_so_often/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/every_so_often.cr","line_number":10,"url":null}],"repository_name":"every_so_often","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"every_so_often/EverySoOften","kind":"module","full_name":"EverySoOften","name":"EverySoOften"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(duration)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":""}],"args_string":"(duration)","args_html":"(duration)","location":{"filename":"src/every_so_often.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"duration","doc":null,"default_value":"","external_name":"duration","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(duration)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]}]}}